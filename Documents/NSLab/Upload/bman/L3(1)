/*
        Name : Akshay Brahmankar.
        Roll No: 12     Div: H
        SUB: NS    LAB-3
        Problem Statement: Implementation of playfair Cipher for alphanumeric input.
*/
#include<cstdio>
#include<iostream>
#include<string>
#include<vector>
#define SIZE 6
using namespace std;

const char* alphabet_string="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const char* number_string="0123456789";
const char* extrachar="X";
char mat[SIZE][SIZE];
int a[26];
int n[10];

//vector to get tide of unwanted character x while decrypting;
vector<int> unwanted_char;

int exist(char ch){
	if(a[(int)ch-65]&&ch>=65&&ch<=97){
		return 1;
	}
	else if(n[(int)ch-48]&&ch>=48&&ch<=57){
		return 1;
	}
	else
		return 0;
}

//function to check whether there exist an element to be used in the matrix
int next_free_ele(){
	static int i=0,j=0;
	for (; i < 26; ++i)
	{
		if(a[i]==0){
			a[i]=1;
			return alphabet_string[i];
		}
	}
	for (j = 0; j < 10; ++j)
	{
		if(n[j]==0){
			n[j]=1;
			return number_string[j];
		}
	}
}

//visit a particular number or character
void visit_ele(char ch){
	if(ch>='A'&&ch<='Z'){
		a[(int)ch-65]=1;
	}
	else{
		n[(int)ch-48]=1;
	}
}

//check the duplicacy of the neighbouring characters and odd length of string
string modify_string(string s){

	for(int i=0,j=1;j<s.length();i+=2,j+=2){
		if(s[i]!=s[j])continue;
		else{
			//we will have to delete the extra c character in the string while decrypt the
			//the string
			unwanted_char.push_back(j);
			s.insert(j,extrachar);
		}
	}
	if(s.length()%2!=0){
		s+='X';
		//take the last x character into consideration
		unwanted_char.push_back(s.length()-1);
	}
	return s;
}

//find the charache
string get_encrypted_char(char x,char y,int inc)
{
	int row1,col1,row2,col2;
	string cycle_str="";
	//this is a counter to keep track of the element found in the matrix
	int ele_found=0;
	for(int i=0;i<SIZE&&ele_found<2;i++){
		for(int j=0;j<SIZE&&ele_found<2;j++){
			if(mat[i][j]==x){
				row1=i;
				col1=j;
				ele_found++;
			}
			else if(mat[i][j]==y){
				row2=i;
				col2=j;
				ele_found++;
			}
		}
	}
	//here we take the next character in right to left fashion
	if(row1==row2){
		if(col1==SIZE-1&&inc==1)
			col1=0;
		else if(inc==1)
			col1++;
		else if(col1==0&&inc==-1)
			col1=SIZE-1;
		else if(inc==-1)
			col1--;

		cycle_str+=mat[row1][col1];
		//cycle_str+=mat[row2][col2];
	}
	//here we take the next character in up to down fashion
	else if(col1==col2){
		if(row1==SIZE-1&&inc==1)
			row1=0;
		else if(inc==1)
			row1++;
		if(row1==0&&inc==-1)
			row1=SIZE-1;
		else if(inc==-1)
			row1--;
		cycle_str+=mat[row1][col1];

	}
	else
			cycle_str=mat[row1][col2];
	//in pair row of the first element and column of the second element

	return cycle_str;
}

string remove_extra_char(string str){
	string ret="";
	for(int i=0,j=0;i<str.length();i++){
		if(unwanted_char[j]==i){
			j++;
			continue;
		}
		ret+=str[i];
	}
	return ret;
}

//store the result in the given string
string res;
//string to use as keyword
//s1 string is used as modified string
string s,s1;
void play_fair(int en_de){
		res="";
		for (int i = 0; i < s1.length(); i+=2)
		{
			res+=get_encrypted_char(s1[i],s1[i+1],en_de);
			res+=get_encrypted_char(s1[i+1],s1[i],en_de);
		}
}
int main(){

	//string to encrypt
	string enword;
	int k=0;
	cout<<"Enter the string to encrypt"<<endl;
	getline(cin,enword);
	cout<<"Enter the keyword"<<endl;
	getline(cin,s);
	//Encryption matrix
	for(int i=0;i<SIZE;i++){
		for(int j=0;j<SIZE;j++){
			if(k<s.length()){
				//check whether character is repeated or not
				if(exist(s[k]))
				{
					k++;
					continue;
				}
				mat[i][j]=s[k];
				visit_ele(s[k]);
				k++;
			}
			else{
				//get the next element to be put into the matrix
				mat[i][j]=next_free_ele();
			}
		}
	}
	//we modify the encrypted string to make our algorithm work
	s1=modify_string(enword);
	//call fair play to encrypt the string
	//pass one for encryption
	play_fair(1);
	//print the encrypted string
	cout<<"Encrypted string is "<<endl;
	cout<<res<<endl;
	s1=res;

	//call fair play to decrypt the string
	//pass -1 for decryption
	play_fair(-1);
	res=remove_extra_char(res);

	//print the decrypted string
	cout<<"Decrypted string is"<<endl;
	cout<<res<<endl;
	return 0;
}

/*

OUTPUT :
Enter the string to encrypt
AKSHAY123
Enter the keyword
FUN35
Encrypted string is
NOVEN1W9UZ
Decrypted string is
AKSHAY123

Process returned 0 (0x0)   execution time : 14.906 s
Press any key to continue.



*/

